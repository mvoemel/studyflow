@startuml

package services {
    interface ServiceCollection {
        + <T> getService(clazz: Class<T>): Optional<T>
        + <T> getRequiredService(clazz: Class<T>): T
    }

    interface ServiceCollectionBuilder {
        + <T> registerSingelton(clazz: Class<T>, factory: Function<ServiceCollection, T>): ServiceCollectionBuilder
        + <T> register(clazz: Class<T>, constructor: Supplier<T>): ServiceCollectionBuilder
        + <T> register(clazz: Class<T>, factory: Function<ServiceCollection, T>): ServiceCollectionBuilder
        + build(): ServiceCollection
    }
}

package webserver {
    package annotations {
        annotation Endpoint {
            + method(): HttpMethod
        }

        annotation Route {
            + path(): String
        }
    }

    package http {
        interface CaptureContainer {
            size(): int
            keys(): Collection<String>
            values(): Collection<String>
            get(key: String): Optional<String>
        }

        interface HttpResponse {
            + getCookies(): CookieContainer
            + getStatusCode(): HttpStatusCode
            + setStatusCode(statusCode: HttpStatusCode)
            + getResponseBody(): WritableBodyContent
            + setResponseBody(content: WritableBodyContent): HttpResponse
        }

        interface HttpRequest {
            + getCookies(): CookieContainer
            + getHeaders(): HeaderContainer
            + getRequestBody(): Optional<ReadableBodyContent>
            + createResponse(): HttpResponse
        }

        enum HttpStatusCode {
            + OK
            + CREATED
            + BAD_REQUEST
            + UNAUTHORIZED
            + FORBIDDEN
            + NOT_FOUND
            + INTERNAL_SERVER_ERROR
        }

        enum HttpMethod {
            + GET
            + PUT
            + POST
            + DELETE
        }


        HttpRequest --> HttpResponse
        HttpResponse ---> HttpStatusCode
        HttpResponse --d-> contents.WritableBodyContent
        HttpRequest --d-> contents.ReadableBodyContent
        HttpRequest -r-> cookies.CookieContainer
        HttpResponse -r-> cookies.CookieContainer
    }

    package http.cookies {
        class Cookie
        interface CookieContainer {
            + hasCookie(name: String): boolean
            + get(name: String): Optional<Cookie>
            + set(cookie: Cookie): void
            + remove(name: String): void
            + asCollection(): Collection<Cookie>
        }

        enum SameSite {
            + STRICT
            + LAX
            + NONE
        }

        Cookie -> SameSite
        CookieContainer -d-> Cookie
    }

    package http.contents {
        interface BodyContent {
            + getContentTypeHeader(): String
            + getContentLength(): long
        }

        interface ReadableBodyContent {
            + <T> read(valueType: Class<T>): T
            + <T> tryRead(valueType: Class<T>): Optional<T>
        }

        interface WritableBodyContent {
            + write(outputStream: OutputStream): void
        }

        BodyContent <|-u- ReadableBodyContent
        BodyContent <|-u- WritableBodyContent


        interface ReadableBodyContentFactory {
            + create(String mimeType, Map<String, String> properties, InputStream inputStream): ReadableBodyContent
        }

        interface ReadableBodyContentInstanceFactory {
            + create(String mimeType, ServiceCollection serviceCollection, Map<String, String> properties, InputStream inputStream): ReadableBodyContent
        }


        class JsonContent {
            {static} + <T> writableOf(content: T): WritableJsonContent
            {static} + readableOf(mimeType: String, serviceCollection: ServiceCollection, properties: Map<String, String> inputStream: InputStream): ReadableJsonContent
        }
        note right of JsonContent : Both Write- and ReadableJsonContent\nare nested private classes and should\n be created using the factory methods\nwritable- and readableOf.

        class WritableJsonContent {
        }

        class ReadableJsonContent {
        }

        JsonContent -u-|> BodyContent

        WritableJsonContent -d-|> JsonContent
        ReadableJsonContent -d-|> JsonContent
        WritableJsonContent -u-|> WritableBodyContent
        ReadableJsonContent -u-|> ReadableBodyContent

        ReadableBodyContentInstanceFactory <-u- ReadableBodyContentFactory
        ReadableBodyContent <-- ReadableBodyContentInstanceFactory

    }

    package controllers.routing {
        class RestRoute {
            + segments(): List<RouteSegment>
            {static} + of(route: String): RestRoute
        }

        class RouteSegment {
            + value(): String
            + type(): SegmentType

            + is(type: SegmentType): boolean
        }

        class RouteTrie {
            + insert(endpoint: EndpointMetadata)
            + retrieve(method: HttpMethod, routeSegments: List<String>): Optional<Tuple<EndpointMetadata, List<String>>>
        }

        enum SegmentType {
            + STATIC
            + CAPTURE
        }

        RouteSegment --> SegmentType
        RestRoute --> RouteSegment
        RouteTrie --> webserver.controllers.EndpointMetadata
    }

    package controllers {
        interface "ControllerFactory<T>" as ControllerFactory {
            + create(serviceCollection: ServiceCollection): T
        }

        class ControllerMetadata<C>{
            + clazz(): Class<C>
            + factory(): ControllerFactory<C>
            + route(): RestRoute
            + endpoints(): List<EndpointMetadata>
        }

        class EndpointMetadata {
            + controller(): ControllerMetadata<?>
            + method(): HttpMethod
            + route(): RestRoute
            + endpoint(): Method
        }

        interface ControllerRegistry {
            + getRegisteredControllers(): List<ControllerMetadata<?>>
        }

        interface ControllerRegistryBuilder {
            + <C> register(clazz: Class<C>, supplier: Supplier<C>): ControllerRegistryBuilder
            + <C> register(clazz: Class<C>, factory: ControllerFactory<C>): ControllerRegistryBuilder
            + build(): ControllerRegistry
        }

        EndpointMetadata -d-> webserver.http.HttpMethod
        EndpointMetadata <--> ControllerMetadata

        ControllerRegistry --> ControllerMetadata
        ControllerRegistryBuilder --> ControllerRegistry
        ControllerMetadata --> ControllerFactory
        ControllerMetadata --d-> RestRoute
        EndpointMetadata --d-> RestRoute
        ControllerFactory --u-> ServiceCollection
    }

    package http.pipeline {
        interface RequestContext {
            + getTarget(): EndpointMetadata
            + getHttpRequest(): HttpRequest
            + getUrlCaptures(): CaptureContainer
        }

        interface RequestProcessor {
            + process(context: RequestContext): HttpResponse
        }

        class InvokeByRequestContextEndpointInvoker

        InvokeByRequestContextEndpointInvoker -d-|> RequestProcessor
        RequestProcessor -l-> RequestContext
        RequestContext --> CaptureContainer
        RequestContext --> controllers.EndpointMetadata
    }

    interface WebServer {
        + start(): void
    }

    interface WebServerBuilder {
        + configureControllers(configurationAction: Consumer<ControllerRegistryBuilder>): WebServerBuilder
        + configureServices(serviceCollectionBuilder: Consumer<ServiceCollectionBuilder>): WebServerBuilder
        + build(): WebServer
    }

    }

    WebServerBuilder --> WebServer
    WebServerBuilder --> webserver.controllers.ControllerRegistryBuilder
    WebServerBuilder --l> services.ServiceCollectionBuilder
}

@enduml